<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="2d86cec8-0ecc-4e98-87e6-d6fd3014b5f6" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="example.noSchema.topic - Consumer" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" zephyrTestName="" zephyrTestId="">
  <con:settings id="010456e3-ab26-4348-bdba-07812cd6dfde">
    <con:setting id="9cc0b0d9-a43b-45f9-80d0-535780f6446cfileName">example.noSchema.topic---Consumer</con:setting>
    <con:setting id="0e0087d9-d103-4f6a-8d67-ba6f373f5122fileName">example.noSchema.topic---Consumer</con:setting>
    <con:setting id="2d86cec8-0ecc-4e98-87e6-d6fd3014b5f6fileName">example.noSchema.topic---Consumer</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="Modify Subscriber Settins" id="78b685d5-7691-4134-ab77-f1e34a292dec" disabled="true">
    <con:settings/>
    <con:config>
      <script>//import org.json.JSONObject
//def endpoint = context.expand( '${API Subscriber#endpoint}' ) // endpoint
//def channel = context.expand( '${API Subscriber#channel}' ) // topic

//def i = context.expand( '${#TestCase#i}' )
//def data = context.expand( '${API Subscriber#data#$[${#TestCase#i}]}' )

// Script helps to change basic settings for Subscriber Test Step

def kafkaStepName = "API Subscriber"
def maxIdle = context.expand( '${#Project#MaxIdle}' )
def maxMessagesRecived = 5
def maxRunTime = context.expand( '${#Project#MaxRunTime}' )


testRunner.testCase.getTestStepByName(kafkaStepName).setMaxIdleTime(maxIdleTime)
log.info "Currently for \"" + kafkaStepName + "\" > set Maximum Idle Time is: " +  testRunner.testCase.getTestStepByName(kafkaStepName).getMaxIdleTime()

testRunner.testCase.getTestStepByName(kafkaStepName).setMaxMessagesReceived(maxMessagesRecived)
log.info "Currently for \"" + kafkaStepName + "\" > Maximum no. of Messages Received is: " + testRunner.testCase.getTestStepByName(kafkaStepName).getMaxMessagesReceived()

testRunner.testCase.getTestStepByName(kafkaStepName).setMaxRunTime(maxRunTime)
log.info "Currently for \"" + kafkaStepName + "\" > Maximum Test Step Run Time is:   " + testRunner.testCase.getTestStepByName(kafkaStepName).getMaxRunTime()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="multiConfigureTestStep" name="API Subscriber" id="8752d873-df30-4fcf-8338-c64b03430b2b">
    <con:settings/>
    <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" activeStep="kafkaSubscribeTestStep" xsi:type="con:MultiConfigurationStep">
      <con:kafkaSubscribeStep>
        <con:operationId>704f0e62-a768-4204-9360-6fd7ac276a86</con:operationId>
        <con:operationName>Subscribe</con:operationName>
        <con:channelName>example.noSchema.topic</con:channelName>
        <con:serviceName>Kafka Broker0</con:serviceName>
        <con:endpoint>localhost:9092</con:endpoint>
        <con:connectionProperties/>
        <con:schemaRegistry/>
        <con:messageType>JSON via Avro (Confluent)</con:messageType>
        <con:keyType>JSON</con:keyType>
        <con:closeConditionType>ANY_CONDITION</con:closeConditionType>
        <con:maxIdleTime>10</con:maxIdleTime>
        <con:maxMessagesReceived>10</con:maxMessagesReceived>
        <con:maxRunTime>10</con:maxRunTime>
        <con:assertion type="GroovyScriptAssertion" name="Script Assertion - Validate for single specific message" id="7f06d450-d77d-4dd0-b137-4be1d0fd73b5">
          <con:configuration>
            <scriptText>sleep(10000)


def messages = context.getCurrentStep().data

def validMessage = "{   \"favorite_city\" : \"Berlin\",   \"favorite_number\" : 4,   \"favorite_color\" : \"Black\"}"
//def data = context.expand( '${#[Kafka - example.noSchema.topic#example.noSchema.topic - Producer#API Publisher - Expected message]#data}' )

def validCounter = 0;
//log.info messages[0]

log.info "Validate count for following message:" + validMessage

for(message in messages){
	if (message.replace("\\n","").replace("\\","").contains(validMessage)){
//		assert message.replace("\\n","").replace("\\","").contains(validMessage)
		validCounter++;
	}
}
log.info "Number of expected messages:" +  validCounter

assert (validCounter > 0 &amp;&amp; validCounter &lt; 2);</scriptText>
          </con:configuration>
        </con:assertion>
        <con:ignoreMessagesBeforeConnect>false</con:ignoreMessagesBeforeConnect>
      </con:kafkaSubscribeStep>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Assert Subscriber" id="c298e3ab-1bb5-48c1-ac3c-aecd51aa9841" disabled="true">
    <con:settings/>
    <con:config>
      <script><![CDATA[def messages = context.getTestCase().getTestStepByName("API Subscriber").data

def validMessage = "{   \"favorite_city\" : \"Berlin\",   \"favorite_number\" : 4,   \"favorite_color\" : \"Black\"}"
//def data = context.expand( '${#[Kafka - example.noSchema.topic#example.noSchema.topic - Producer#API Publisher - Expected message]#data}' )

def validCounter = 0;
//log.info messages[0]

log.info "Validate count for following message:" + validMessage

for(message in messages){
	if (message.replace("\\n","").replace("\\","").contains(validMessage)){
//		assert message.replace("\\n","").replace("\\","").contains(validMessage)
		validCounter++;
	}
}
log.info "Number of expected messages:" +  validCounter

//if(validCounter > 0 && validCounter < 2){

testRunner.cancel("To mach of expected messages")

assert (validCounter > 0 && validCounter < 2);]]></script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>i</con:name>
      <con:value>0</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
